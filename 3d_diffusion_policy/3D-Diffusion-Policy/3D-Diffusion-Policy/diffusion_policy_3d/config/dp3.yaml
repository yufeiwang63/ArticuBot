defaults:
  - task: adroit_hammer

name: train_dp3

task_name: ${task.name}
shape_meta: ${task.shape_meta}
exp_name: "debug"

horizon: 4
n_obs_steps: 2
n_action_steps: 4
n_latency_steps: 0
dataset_obs_steps: ${n_obs_steps}
keypoint_visible_rate: 1.0
obs_as_global_cond: True

policy:
  _target_: diffusion_policy_3d.policy.dp3.DP3
  use_point_crop: true
  condition_type: film
  use_down_condition: true
  use_mid_condition: true
  use_up_condition: true
  
  diffusion_step_embed_dim: 128
  down_dims:
  - 512
  - 1024
  - 2048
  crop_shape:
  - 80
  - 80
  # encoder_output_dim: 128
  encoder_output_dim: 64
  normalize_action: true # [AugDebug]
  scale_scene_by_pcd: false # [AugDebug]
  horizon: ${horizon}
  kernel_size: 5
  n_action_steps: ${n_action_steps}
  n_groups: 8
  n_obs_steps: ${n_obs_steps}

  noise_scheduler:
    _target_: diffusers.schedulers.scheduling_ddim.DDIMScheduler
    num_train_timesteps: 100
    beta_start: 0.0001
    beta_end: 0.02
    beta_schedule: squaredcos_cap_v2
    clip_sample: True
    set_alpha_to_one: True
    steps_offset: 0
    prediction_type: sample # sample, epsilon, v_prediction


  num_inference_steps: 10
  obs_as_global_cond: true
  shape_meta: ${shape_meta}

  use_pc_color: false
  pointnet_type: "pointnet"


  ### weighted diffusion params
  use_normalization: false
  weight_loss_coef: 1
  load_pretrained_pointnet: false
  noise_model_type_weighted_diffusion: "pointnet2"
  num_classes_encoder: 128
  model_invariant: True

  pointcloud_encoder_cfg:
    in_channels: 3
    out_channels: ${policy.encoder_output_dim}
    use_layernorm: true
    final_norm: layernorm # layernorm, none
    normal_channel: false

  use_state: true
  
  # act3d encoder params
  encoder_type: act3d
  act3d_encoder_cfg:
    in_channels: 5
    num_gripper_points: 4
    goal_mode: null
    mode: null
    use_mlp: false
    self_attention: false
    use_attn_for_point_features: false
    pointcloud_backbone: 'mlp'
    use_lightweight_unet: false
    final_attention: false
    attention_num_heads: 3 
    attention_num_layers: 2
    use_repr_10d: false
    pos_ori_imp: false
    use_single_goal_point: false
  prediction_target: action

  ### transformer diffusion parameters
  noise_model_type: unet # unet, transformer 
  diffusion_attn_embed_dim: 240
  transformer_type: "default"
  policy_type: low_level

  # weigthed diffusion loss weights
  weight_loss_weight: 1.0
  diffusion_loss_weight: 1.0
  pointnet_encoder_output_dim: 129
  pointnet_class: pointnet2_super


ema:
  _target_: diffusion_policy_3d.model.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.0
  power: 0.75
  min_value: 0.0
  max_value: 0.9999

dataloader:
  batch_size: 30
  num_workers: 12
  shuffle: True
  pin_memory: True
  persistent_workers: False

val_dataloader:
  batch_size: 30
  num_workers: 12
  shuffle: False
  pin_memory: True
  persistent_workers: False

optimizer:
  _target_: torch.optim.AdamW
  lr: 1.0e-4
  betas: [0.95, 0.999]
  eps: 1.0e-8
  weight_decay: 1.0e-6

training:
  use_amp: False
  device: "cuda:0"
  seed: 42
  debug: False
  resume: False
  lr_scheduler: cosine
  lr_warmup_steps: 500
  num_epochs: 3010
  gradient_accumulate_every: 1
  use_ema: True
  rollout_every: 10000000 ### we do not perform rollout during training 
  checkpoint_every: 500
  val_every: 10
  sample_every: 5
  max_train_steps: null
  max_val_steps: null
  tqdm_interval_sec: 1.0
  pretrained_weighted_displacement_goal_model: null
  add_noise_to_goal_gripper_pcd: false

logging:
  group: ${exp_name}
  id: null
  mode: online
  name: ${exp_name}_{training.seed}
  project: articubot_dp3_low_level
  resume: true
  tags:
  - dp3

eval_first: False


checkpoint:
  save_ckpt: True # if True, save checkpoint every checkpoint_every
  topk:
    monitor_key: test_mean_score
    mode: max
    k: 1
    format_str: 'epoch={epoch:04d}-test_mean_score={test_mean_score:.3f}.ckpt'
  save_last_ckpt: True # this only saves when save_ckpt is True
  save_last_snapshot: True

load_checkpoint_path: null
load_policy_path: null
load_exclude_keys: []

multi_run:
  run_dir: data/${exp_name}/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  wandb_name_base: ${exp_name}_${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}

hydra:
  job:
    override_dirname: ${name}
  run:
    dir: data/${exp_name}/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  sweep:
    dir: data/${exp_name}/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
    subdir: ${hydra.job.num}

use_pretrained_high_level_policy_as_low_level_input: false
